# GitHub Actions — validation-remote-rllib
name: validation-remote-rllib

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:

jobs:
  e2e:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        python-version: ["3.11"]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30

    env:
      REMOTERL_API_KEY: ${{ secrets.REMOTERL_API_KEY }}

    steps:  
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      # ────────────── Install RemoteRL SDK  ────────────── 
      - name: Install RemoteRL 
        shell: bash          # ← ensure bash even on windows-latest
        run: |
          python -m pip install --no-cache-dir \
            -i https://test.pypi.org/simple/ \
            --extra-index-url https://pypi.org/simple \
            "remoterl==1.1.7" "ray[rllib]==2.42.*" torch pillow

      # ────────────── Simulator (background) ──────────────
      - name: Launch simulator (20min timeout)
        shell: bash
        run: |
          # macOS needs gtimeout; alias if missing.
          if [[ "${{ runner.os }}" == "macOS" && ! $(command -v timeout) ]]; then
            brew install coreutils
            alias timeout='gtimeout'
          fi

          # Start simulator; save PID
          timeout 20m remoterl simulate --headless &
          SIM_PID=$!
          echo "SIM_PID=$SIM_PID" >> $GITHUB_ENV

          sleep 10  # Give it time to start

      # ────────────── Train (rllib) ──────────────
      - name: Train (gym core)
        shell: bash
        run: timeout 20m remoterl train rllib --env CartPole-v1 --num-env-runners 2

      # ────────────── Teardown simulator ──────────────
      - name: Stop simulator (Unix ‑ Ctrl+C)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          # Send SIGINT (Ctrl+C) for graceful shutdown
          kill -SIGINT $SIM_PID || true

          # Wait up to 10 s for it to exit
          for i in {1..10}; do
            ps -p $SIM_PID > /dev/null || exit 0
            sleep 1
          done

          # Fall back to TERM if still alive
          kill -SIGTERM $SIM_PID || true

      - name: Stop simulator (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          # Ctrl+C equivalent isn’t exposed; force‑stop as last resort
          Stop-Process -Id $env:SIM_PID -Force -ErrorAction SilentlyContinue
